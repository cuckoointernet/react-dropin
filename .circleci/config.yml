---
version: 2.1

references:
  job_defaults: &job_defaults
    docker:
      - image: circleci/node:16-browsers
    environment:
      - TERM: xterm
      - BUILD_TARGET: ./dist

  restore_node_modules: &restore_node_modules
    restore_cache:
      name: Restoring node_modules and yarn cache
      keys:
        - npm-v1-{{ checksum ".nvmrc" }}-{{ checksum "package-lock.json" }}
        - npm-v1-{{ checksum ".nvmrc" }}

  install_deps: &install_deps
    run:
      name: Install Dependencies
      command: npm install
      environment:
        NODE_ENV: development

  cache_node_modules: &cache_node_modules
    save_cache:
      name: Caching node_modules
      key: npm-v1-{{ checksum ".nvmrc" }}-{{ checksum "package-lock.json" }}
      paths:
        - node_modules

jobs:
  deps:
    <<: *job_defaults
    steps:
      - checkout
      - *restore_node_modules
      - *install_deps
      - *cache_node_modules

  lint:
    <<: *job_defaults
    steps:
      - checkout
      - *restore_node_modules
      - run: npm run lint

  build:
    <<: *job_defaults
    steps:
      - checkout
      - *restore_node_modules
      - run: npm run build
      - persist_to_workspace:
          root: ~/project
          paths: .

  # NPM_TOKEN is a automatable publish token, assigned to the gocardless npm
  # organisation. This step publishes the files that were build in build.
  publish:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Publish package
          command: npm publish --access=public

  # Build the Storybook assets as a website that can be used with GitHub pages
  storybook-build:
    <<: *job_defaults
    steps:
      - checkout
      - *restore_node_modules
      - run: npm run build-storybook
      - persist_to_workspace:
          root: ~/project
          paths: .

  # Publish Storybook resources to gh-pages.
  storybook-publish:
    <<: *job_defaults
    steps:
      - attach_workspace:
          at: ~/project
      # This is the deploy key configured to permit write access to react-dropin
      - add_ssh_keys:
          fingerprints:
            - "ef:5e:0b:01:b2:ff:ac:2c:20:a2:d8:90:ab:54:9b:aa"
      - run:
          name: Remove checkout key
          command: ssh-add -d <(ssh-add -L | grep rsa)
      # Don't perform strict host checking on GitHub, as this causes the
      # interactive prompt to hang when we're publishing.
      - run:
          name: Avoid hosts unknown for github
          command: |
            mkdir -p ~/.ssh/
            echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: Install dependencies
          command: sudo apt-get install -y rsync
      - run:
          name: Publish Storybook
          command: node ./publish-storybook.js

workflows:
  version: 2
  build:
    jobs:
      - deps:
          filters:
            tags:
              only: /^v.*/
      - lint:
          requires:
            - deps
          filters:
            tags:
              only: /^v.*/

      # Build the Javascript assets
      - build:
          requires:
            - deps
          filters:
            tags:
              only: /^v.*/

      # Publish to npm if we're running on a tag that looks like a version.
      - publish:
          requires:
            - lint
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      # Whenever we push to master, update our Storybook on gh-pages.
      - storybook-build:
          requires:
            - deps
          filters:
            branches:
              only: /^master|main$/
      - storybook-publish:
          requires:
            - storybook-build
          filters:
            branches:
              only: /^master|main$/
